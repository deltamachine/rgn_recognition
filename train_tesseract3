import os
import sys


def run_training(list_of_files):
    bare_names = []
    dictionary_data = []
    box_string = ''
    tr_string = ''

    for file in list_of_files:
        if file[-4:] = '.tif':
            bare_name = file[:-4] 
            bare_names.append(bare_name)

            os.system('tesseract ' + file + ' ' + bare_name + ' box.train')
        if '_list' in file:
            dictionary_data.append(file)

    for elem in bare_names:
        box_string = elem + '.box '
        tr_string = elem + '.tr '

    return box_string, tr_string, dictionary_data

def get_unicharset_and_shapes(box_string, tr_string, path, lang):
    os.system('unicharset_extractor ' + box_string)
    os.system('set_unicharset_properties -U unicharset -O unicharset --script_dir=' + path)
    os.system('mftraining -F font_properties -U unicharset -O ' + lang + 'unicharset ' + tr_string)
    os.system('cntraining ' + tr_string)

def make_dawgs(dictionary_data, lang):
    for elem in dictionary_data:
        kind = elem.split('_')[0]
        os.system('wordlist2dawg ' + elem + ' ' + lang + kind + '-dawg ' + lang + 'unicharset')

def rename_files(path, lang):
    new_list_of_files = os.listdir(path)

    for file in new_list_of_files:
        if lang not in file:
            os.rename(path + file, path + lang + file)
       
def main():
    path = sys.argv[1]
    lang = sys.argv[2] + '.'

    os.chdir(path)
    os.system('cd ' + path)
    
    list_of_files = os.listdir(path)

    box_string, tr_string, dictionary_data = run_training(list_of_files)
    
    get_unicharset_and_shapes(box_string, tr_string, path, lang)
    make_dawgs(dictionary_data, lang) 
    rename_files(path, lang)

    os.system ('combine_tessdata ' + lang)


if __name__ == '__main__':
    main()
